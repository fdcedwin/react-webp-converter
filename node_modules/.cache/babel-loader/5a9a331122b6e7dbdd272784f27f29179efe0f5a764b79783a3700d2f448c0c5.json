{"ast":null,"code":"var _jsxFileName = \"/Users/fdc-edwin-nc-fe/Documents/react-webp-converter/image-converter-webapp/src/components/Converter.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Converter = () => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [convertedFiles, setConvertedFiles] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  // Handle file selection\n  const handleFileSelection = event => {\n    setSelectedFiles([...event.target.files]);\n    setConvertedFiles([]);\n    setStatus(\"\");\n  };\n\n  // Convert images to WebP\n  const convertToWebP = async () => {\n    if (!selectedFiles.length) {\n      setStatus(\"Please select images to convert!\");\n      return;\n    }\n    const options = {\n      fileType: \"image/webp\",\n      // Ensure the output is WebP\n      maxSizeMB: 1,\n      // Maximum size of the output file\n      useWebWorker: true // Use Web Worker for better performance\n    };\n    const converted = [];\n    setStatus(\"Converting images...\");\n    for (const file of selectedFiles) {\n      try {\n        const compressedFile = await imageCompression(file, options);\n\n        // Rename the file to have a .webp extension\n        const webpFile = new File([compressedFile], file.name.replace(/\\.[^/.]+$/, \".webp\"), {\n          type: \"image/webp\"\n        });\n        converted.push(webpFile);\n      } catch (error) {\n        console.error(\"Error converting file:\", error);\n      }\n    }\n    setConvertedFiles(converted);\n    setStatus(`${converted.length} images converted successfully!`);\n  };\n\n  // Download a converted file\n  const downloadFile = file => {\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(file);\n    link.download = file.name; // Ensure the correct name is used\n    link.click();\n\n    // Revoke the object URL to free memory\n    URL.revokeObjectURL(link.href);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"converter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image to WebP Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      accept: \"image/png, image/jpeg\",\n      onChange: handleFileSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: convertToWebP,\n      children: \"Convert to WebP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"converted-files\",\n      children: convertedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => downloadFile(file),\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Converter, \"DV18IP5c4f4MeLZJbbBx5sO+080=\");\n_c = Converter;\nexport default Converter;\nvar _c;\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"names":["React","useState","imageCompression","jsxDEV","_jsxDEV","Converter","_s","selectedFiles","setSelectedFiles","convertedFiles","setConvertedFiles","status","setStatus","handleFileSelection","event","target","files","convertToWebP","length","options","fileType","maxSizeMB","useWebWorker","converted","file","compressedFile","webpFile","File","name","replace","type","push","error","console","downloadFile","link","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","multiple","accept","onChange","onClick","map","index","_c","$RefreshReg$"],"sources":["/Users/fdc-edwin-nc-fe/Documents/react-webp-converter/image-converter-webapp/src/components/Converter.js"],"sourcesContent":["import React, { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\n\nconst Converter = () => {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [convertedFiles, setConvertedFiles] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  // Handle file selection\n  const handleFileSelection = (event) => {\n    setSelectedFiles([...event.target.files]);\n    setConvertedFiles([]);\n    setStatus(\"\");\n  };\n\n  // Convert images to WebP\n  const convertToWebP = async () => {\n    if (!selectedFiles.length) {\n      setStatus(\"Please select images to convert!\");\n      return;\n    }\n\n    const options = {\n      fileType: \"image/webp\", // Ensure the output is WebP\n      maxSizeMB: 1,          // Maximum size of the output file\n      useWebWorker: true,    // Use Web Worker for better performance\n    };\n\n    const converted = [];\n    setStatus(\"Converting images...\");\n    for (const file of selectedFiles) {\n      try {\n        const compressedFile = await imageCompression(file, options);\n\n        // Rename the file to have a .webp extension\n        const webpFile = new File([compressedFile], file.name.replace(/\\.[^/.]+$/, \".webp\"), {\n          type: \"image/webp\",\n        });\n\n        converted.push(webpFile);\n      } catch (error) {\n        console.error(\"Error converting file:\", error);\n      }\n    }\n\n    setConvertedFiles(converted);\n    setStatus(`${converted.length} images converted successfully!`);\n  };\n\n  // Download a converted file\n  const downloadFile = (file) => {\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(file);\n    link.download = file.name; // Ensure the correct name is used\n    link.click();\n\n    // Revoke the object URL to free memory\n    URL.revokeObjectURL(link.href);\n  };\n\n  return (\n    <div className=\"converter\">\n      <h1>Image to WebP Converter</h1>\n\n      {/* File Input */}\n      <input\n        type=\"file\"\n        multiple\n        accept=\"image/png, image/jpeg\"\n        onChange={handleFileSelection}\n      />\n      <button onClick={convertToWebP}>Convert to WebP</button>\n      <p>{status}</p>\n\n      {/* Display Converted Files */}\n      <div className=\"converted-files\">\n        {convertedFiles.map((file, index) => (\n          <div key={index}>\n            <p>{file.name}</p>\n            <button onClick={() => downloadFile(file)}>Download</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Converter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}