{"ast":null,"code":"var _jsxFileName = \"/Users/fdc-edwin-nc-fe/Documents/react-webp-converter/image-converter-webapp/src/components/Converter.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\nimport JSZip from 'jszip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Converter = () => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [convertedFiles, setConvertedFiles] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  // Handle file selection\n  const handleFileSelection = event => {\n    setSelectedFiles([...event.target.files]);\n    setConvertedFiles([]);\n    setStatus(\"\");\n  };\n\n  // Convert images to WebP\n  const convertToWebP = async () => {\n    if (!selectedFiles.length) {\n      setStatus(\"Please select images to convert!\");\n      return;\n    }\n    const options = {\n      fileType: \"image/webp\",\n      maxSizeMB: 1,\n      useWebWorker: true\n    };\n    const converted = [];\n    setStatus(\"Converting images...\");\n    for (const file of selectedFiles) {\n      try {\n        const compressedFile = await imageCompression(file, options);\n\n        // Rename the file to have a .webp extension\n        const webpFile = new File([compressedFile], file.name.replace(/\\.[^/.]+$/, \".webp\"), {\n          type: \"image/webp\"\n        });\n        converted.push(webpFile);\n      } catch (error) {\n        console.error(\"Error converting file:\", error);\n      }\n    }\n    setConvertedFiles(converted);\n    if (converted.length > 1) {\n      setStatus(\"Conversion successful! Download all files as a ZIP.\");\n    } else {\n      setStatus(\"Conversion successful!\");\n    }\n  };\n\n  // Download all files as a ZIP\n  const downloadAllAsZip = async () => {\n    const zip = new JSZip();\n    const folder = zip.folder(\"Converted_WebP_Images\");\n\n    // Add each converted file to the ZIP\n    convertedFiles.forEach(file => {\n      folder.file(file.name, file);\n    });\n\n    // Generate the ZIP and trigger download\n    setStatus(\"Creating ZIP...\");\n    const zipBlob = await zip.generateAsync({\n      type: \"blob\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(zipBlob);\n    link.download = \"Converted_Images.zip\";\n    link.click();\n    URL.revokeObjectURL(link.href);\n    setStatus(\"ZIP file ready for download!\");\n  };\n\n  // Download a single file\n  const downloadFile = file => {\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(file);\n    link.download = file.name;\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"converter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image to WebP Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      accept: \"image/png, image/jpeg\",\n      onChange: handleFileSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: convertToWebP,\n      children: \"Convert to WebP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), convertedFiles.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadAllAsZip,\n      children: \"Download All as ZIP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), convertedFiles.length === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"converted-files\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: convertedFiles[0].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => downloadFile(convertedFiles[0]),\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Converter, \"DV18IP5c4f4MeLZJbbBx5sO+080=\");\n_c = Converter;\nexport default Converter;\nvar _c;\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"names":["React","useState","imageCompression","JSZip","jsxDEV","_jsxDEV","Converter","_s","selectedFiles","setSelectedFiles","convertedFiles","setConvertedFiles","status","setStatus","handleFileSelection","event","target","files","convertToWebP","length","options","fileType","maxSizeMB","useWebWorker","converted","file","compressedFile","webpFile","File","name","replace","type","push","error","console","downloadAllAsZip","zip","folder","forEach","zipBlob","generateAsync","link","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","downloadFile","className","children","fileName","_jsxFileName","lineNumber","columnNumber","multiple","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/fdc-edwin-nc-fe/Documents/react-webp-converter/image-converter-webapp/src/components/Converter.js"],"sourcesContent":["import React, { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\nimport JSZip from 'jszip';\n\nconst Converter = () => {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [convertedFiles, setConvertedFiles] = useState([]);\n  const [status, setStatus] = useState(\"\");\n\n  // Handle file selection\n  const handleFileSelection = (event) => {\n    setSelectedFiles([...event.target.files]);\n    setConvertedFiles([]);\n    setStatus(\"\");\n  };\n\n  // Convert images to WebP\n  const convertToWebP = async () => {\n    if (!selectedFiles.length) {\n      setStatus(\"Please select images to convert!\");\n      return;\n    }\n\n    const options = {\n      fileType: \"image/webp\",\n      maxSizeMB: 1,\n      useWebWorker: true,\n    };\n\n    const converted = [];\n    setStatus(\"Converting images...\");\n    for (const file of selectedFiles) {\n      try {\n        const compressedFile = await imageCompression(file, options);\n\n        // Rename the file to have a .webp extension\n        const webpFile = new File([compressedFile], file.name.replace(/\\.[^/.]+$/, \".webp\"), {\n          type: \"image/webp\",\n        });\n\n        converted.push(webpFile);\n      } catch (error) {\n        console.error(\"Error converting file:\", error);\n      }\n    }\n\n    setConvertedFiles(converted);\n\n    if (converted.length > 1) {\n      setStatus(\"Conversion successful! Download all files as a ZIP.\");\n    } else {\n      setStatus(\"Conversion successful!\");\n    }\n  };\n\n  // Download all files as a ZIP\n  const downloadAllAsZip = async () => {\n    const zip = new JSZip();\n    const folder = zip.folder(\"Converted_WebP_Images\");\n\n    // Add each converted file to the ZIP\n    convertedFiles.forEach((file) => {\n      folder.file(file.name, file);\n    });\n\n    // Generate the ZIP and trigger download\n    setStatus(\"Creating ZIP...\");\n    const zipBlob = await zip.generateAsync({ type: \"blob\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(zipBlob);\n    link.download = \"Converted_Images.zip\";\n    link.click();\n    URL.revokeObjectURL(link.href);\n    setStatus(\"ZIP file ready for download!\");\n  };\n\n  // Download a single file\n  const downloadFile = (file) => {\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(file);\n    link.download = file.name;\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n\n  return (\n    <div className=\"converter\">\n      <h1>Image to WebP Converter</h1>\n\n      {/* File Input */}\n      <input\n        type=\"file\"\n        multiple\n        accept=\"image/png, image/jpeg\"\n        onChange={handleFileSelection}\n      />\n      <button onClick={convertToWebP}>Convert to WebP</button>\n      <p>{status}</p>\n\n      {/* Show \"Download All as ZIP\" button if there are multiple files */}\n      {convertedFiles.length > 1 && (\n        <button onClick={downloadAllAsZip}>Download All as ZIP</button>\n      )}\n\n      {/* Show individual downloads if only one file is converted */}\n      {convertedFiles.length === 1 && (\n        <div className=\"converted-files\">\n          <p>{convertedFiles[0].name}</p>\n          <button onClick={() => downloadFile(convertedFiles[0])}>Download</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Converter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}